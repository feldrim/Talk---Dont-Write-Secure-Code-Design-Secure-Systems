@{
    ViewBag.Title = "Secure Feature Demo - Home";
}

<div class="jumbotron">
    <h1>Secure Features Demo</h1>
	<p>This demo shows a simple set of features where the security concerns are handled in application level code.</p>
	<p>Compare the code in the <b>SecureFeatureController</b> and related views to the other controllers.</p>
	<p><a class="btn btn-default" href="@Url.Action("OrderList", "SecureFeature")">Begin &raquo;</a></p>
</div>

<div class="row">
	<div class="col-md-4">
		<h2>Anonymous Access</h2>
		<p>
			The <b>[Authorize]</b> attribute is added to actions or controllers that require a login. This index 
			page is the only thing accessible anonymously.
		</p>
	</div>
	<div class="col-md-4">
		<h2>Authorization</h2>
		<p>
			The "Manage Orders" action does an explicit permissions check in app code.
		</p>
	</div>
	<div class="col-md-4">
		<h2>Access Control</h2>
		<p>
			The "Order List" and "Order Detail" actions both contain explicit checks, in app code, that prevent users
			from seeing orders they don't own, unless they have the <b>ManageOrders</b> permission.
		</p>
	</div>
</div>
<div class="row">
	<div class="col-md-4">
		<h2>Sensitive Data</h2>
		<p>
			The view model does an explicit permission check before un-masking the SSN, which means the view model needs to know about the current user.
		</p>
	</div>
	<div class="col-md-4">
		<h2>Encryption</h2>
		<p>
			TODO
		</p>
	</div>
	<div class="col-md-4">
		<h2>Anti-CSRF</h2>
		<p>
			The "Order Detail" page includes the standard ASPNET anti-forgery token, and the corresponding MVC action validates it using the [ValidateAntiForgeryToken]
			attribute.
		</p>
	</div>
</div>